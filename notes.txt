Week 1
======

Week 2
======
Use dot notation in search for matching portions of a document.
For example, given the document:

{name:"Sri", email: { work: "sri@work.com", home: "sri@home.com"}}

The following will find the above doc:

c.find({"email.work": "sri@work.com"})

however the following will not

c.find({email: {work: "sri@work.com"}})

All comparison operations in MongoDB are strongly & dynamically typed.

c.find({name: {$gt: "M", $lt: "X"}})

will only search for documents where the name is a String.  IOW if the 
'name' field has non-numeric values in some document they will not 
be tested for this comparison.

Searching for a field by its type.
For example: Find all documents where the name field is a number

c.find({name: {$type: 10}})

here is the type value for a 32-bit integer in the BSON spec
(see http://bsonspec.org/#/specification)

regex searches are not as optimzable as normal string comparison
searches.

Searching in an array:
Given the collection:
{ name: "Fred", interests: ["Running", "Tennis"]}
{ name: "Mary", interests: ["Running"]}

The search
c.find({interests:"Running"})

will find both documents as will

c.find({interests: {$all: ["Running"]}})

the $all operator finds all documents that have "all" the elements
in the operand array (["Running"])

cursors
sort & limit happen on the database and not on the results of a
fetch.

sort, then skip and then limit <-- Things happen in that order.

Week 3
======

More on indexes in week 4.
Did an index get used? --> Use the explain() command.
Multikey index is an index on a key whose value is an array.
Week 4
======
Discovering indexes...

system.indexes is one of the collections that automatically gets created
when you add a collection to a db.

db.system.indexes.find()     -- Lists all indexes in the db.
some_collection.getIndexes() -- Lists all indexes in some_collection.

Cannot create a compound multi-key index, i.e. an index involving 2 keys
both of whose values are arrays. Yes, one can an array.

Unique indexes....

A unique index enforces the constraint that a key can appear only once
in the index.
The automatically created index on _id is implicitly unique.  The call

some_collection.getIndexes()

will not show the "unique:true" setting for the index on _id.

Unique index & drop dups
> db.collection.ensureIndex({key:1}, {unique:true, dropDups:true})

Dangerous.  Can't guarantee *which* duplicate elements are removed.


Sparse Index

Essential when the key is unique.  Imagine a case where the key being
indexed does not occur on multiple documents.  The value for this
key null according the indexing logic.  However the uniquness constraint
precludes duplicate values for the indexed key.  Enter the sparse index.
A sparse index will only index documents which *do* contain the key
being indexed.  From the perspective of the index it is as if the other
documents in the collection do not even exist!

> db.collection.ensureIndex({key:1}, {unique:true, sparse:true})

Explain
Obtained if we issue

> db.collection.find({query}).explain()

Covered index 
An index that fully satisfies the search query (without having to look at
the underlying document).


Week 5
Aggregation framework

$project --> 1:1
$match   --> n:1
$group   --> n:1
$sort    --> 1:1
$skip    --> n:1
$limit   --> n:1
$unwind  --> 1:n

Can have stages occur more than once.
